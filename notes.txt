

6/4/2022
okay so then I started thinking that we should only ever automatically
increase the size of the lookup table, and only shrink it on demand.
a good time to do that would be after a discard request.

then I realized I was being dumb. you can't dynamically shrink the lookup table
because the lookup table represents a map of the disk. to shrink the table
would be to shrink the block device. so the good news is we can still use this
idea to resize the block device bigger or smaller, but there's no point
doing this early in the process, we're not going to need this feature until
we're a way more mature library. 
so for now, let's size the lookup table to the size of the block device as 
defined when it is created, and leave it at that.
for future expansion though, we should still do the numbering from zero things
so the first few blocks of the lookup table should be reserved for the lookup
table.


6/3/2022

so here's a neat idea

the original plan was to have the main header of one block
then a pile of blocks holding the lookup table and then the data blocks
the data blocks would contain mother nodes and offspring nodes just like stree.
the lookup table would only hold pointers to mother nodes, and the mother nodes would
point to the offspring nodes. all well and good.

but you have to predefine the max size of the device because you need to know where to put
data block zero. and you can't move it.
but you can.
just like we can delete out of the middle and move things from the end to the empty spot
we can also move block 0 to the end.
this will allow us to increase the size of lookup table dynamically
we can also similarly shrink it.
but what this means is that the location of data block zero is variable, and therefore 
zero should really start at zero.
so if there's 5 blocks of lookup table, the first data block is block 6.
if we need more lookup table, block 6 moves to block 50, and now block 7 is the first data block.
this means that the first part of the lookup table is actually self referential and not really used
for data lookup because we need to reserve that space in the lookup table for the space that
the lookup table is taking up.
but that should be almost nothing, a block or two here and there.

let's try some examples:

1tb disk, 64k blocks.
1099511627776 bytes of data
65536 bytes per block

16777216 blocks.
each lookup table entry is 4 bytes? 8 bytes?
let's say 8
134,217,728 bytes in lookup table.

2048 blocks for lookup table

but that's a fully used 1tb of stored data.









